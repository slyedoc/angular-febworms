var febworms=febworms||{};febworms.Field=function(e,t){this.name=this.type=e,t&&angular.extend(this,t),this.displayName=this.displayName||this.type.charAt(0).toUpperCase()+this.type.substring(1)},angular.module("febworms",["ngRoute","dq","febworms.templates"]),angular.module("febworms",["febworms.templates"]).config(["$provide",function(e){e.provider("febwormsConfig",function(){function e(e){for(var t=r.length;t--&&r[t].type!==e;);return t}var t={enableDebugInfo:!0,validation:{messages:{},patterns:{}},fields:{templates:[],categories:{},renderInfo:{}}},r=t.fields.templates;return{debug:function(e){t.enableDebugInfo=e},fields:{add:function(t,n,o,i){if(!(t&&t.type&&n&&n.length))throw new Error("Need a valid objectTemplate and at least one category");var a=e(t.type);-1!==a?r[a]=t:r.push(t),this.category(t.type,n),this.renderInfo(t.type,o,i)},remove:function(t){var n=e(t);-1!==n&&r.splice(n,1),this.category(t),this.renderInfo(t)},renderInfo:function(e,r,n){var o={templateUrl:r,propertiesTemplateUrl:n};t.fields.renderInfo[e]=o},category:function(e,r){angular.isArray(r)||(r=[r]),angular.forEach(t.fields.categories,function(t){delete t[e]}),angular.forEach(r,function(r){void 0===t.fields.categories[r]&&(t.fields.categories[r]={}),t.fields.categories[r][e]=!0})}},validation:{message:function(e,r){var n=t.validation.messages;if(angular.isString(e)){if(!r)throw new Error("No message specified for "+e);n[e]=r}else angular.extend(n,e)},pattern:function(e,r){angular.isString(e)?t.validation.patterns[name]=r:angular.extend(t.validation.patterns,e)}},$get:function(){return t}}})}]),angular.module("febworms",["febworms.templates"]).config(["febwormsConfigProvider",function(e){e.validation.message({required:"A value is required for this field.",minlength:'The value does not match the minimum length{{ field.schema && (" of " + field.schema.validation.minlength + " characters" || "")}}.',maxlength:'The value exceeds the maximum length{{ field.schema && (" of " + field.schema.validation.maxlength + " characters" || "")}}.',pattern:'The value "{{ field.state.$viewValue }}" does not match the required format.',email:'The value "{{ field.state.$viewValue }}" is not a valid email address.',unique:'The value "{{ field.state.$viewValue }}" is already in use.',number:'The value "{{ field.state.$viewValue }}" is not a number.',min:'The value {{ field.schema && ("should be at least " + field.schema.validation.min) || field.state.$viewValue + " is too low" }}',max:'The value {{ field.schema && ("should be less than " + field.schema.validation.max) || field.state.$viewValue + " is too high" }}'});var t={"Text input fields":[new febworms.Field("text",{displayName:"Textbox"}),new febworms.Field("email"),new febworms.Field("number",{validation:{maxlength:15}}),new febworms.Field("password"),new febworms.Field("textarea")],"Checkbox fields":[new febworms.Field("checkbox",{nolabel:!0}),new febworms.Field("checkboxlist",{displayName:"Checkbox List",options:[{value:"1",text:"Option 1"},{value:"2",text:"Option 2"},{value:"3",text:"Option 3"}],value:{1:!0,2:!0}})],"Select input fields":[new febworms.Field("radiobuttonlist",{displayName:"Radiobutton List",options:[{value:"1",text:"Option 1"},{value:"2",text:"Option 2"},{value:"3",text:"Option 3"}],value:"1"}),new febworms.Field("selectlist",{displayName:"Select List",options:[{value:"1",text:"Option 1"},{value:"2",text:"Option 2"},{value:"3",text:"Option 3"}],value:"1"})]};angular.forEach(t,function(t,r){angular.forEach(t,function(t){e.fields.add(t,r)})}),e.validation.pattern({None:void 0,Url:"^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",Domain:"^([a-z][a-z0-9-]+(\\.|\\-*\\.))+[a-z]{2,6}$","IPv4 Address":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$","Email Address":"^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$",Integer:"^-{0,1}\\d+$","Positive Integers":"^\\d+$","Negative Integers":"^-\\d+$",Number:"^-{0,1}\\d*\\.{0,1}d+$","Positive Number":"^\\d*\\.{0,1}\\d+$","Negative Number":"^-\\d*\\.{0,1}\\d+$","Year (1920-2099)":"^(19|20)[\\d]{2,2}$",Password:"(?=.*\\d)(?=.*[!@#$%^&*\\-=()|?.\"';:]+)(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$"})}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditValidationMessage",["febwormsEditValidationMessageLinkFn",function(e){return{templateUrl:"components/febworms/edit/canvas/field/properties/validation/validation-message.tmpl.html",link:e,scope:!0}}]).factory("febwormsEditValidationMessageLinkFn",function(){var e="Enter a error message here that will be shown if this validation fails. If this field is empty a default message will be used.";return function(t,r,n){n.$observe("febwormsEditValidationMessage",function(e){t.validationType=e}),n.$observe("febwormsEditValidationTooltip",function(r){r=r||e,t.tooltip=r})}}),angular.module("febworms",["febworms.templates"]).directive("febwormsPropertyFieldValidation",["febwormsPropertyFieldValidationLinkFn",function(e){return{restrict:"A",templateUrl:"components/febworms/edit/canvas/field/properties/validation/validation.tmpl.html",link:e}}]).factory("febwormsPropertyFieldValidationLinkFn",["febwormsConfig",function(e){var t=[],r=e.validation.patterns;return angular.forEach(r,function(e,r){t.push({value:e,text:r})}),function(e,r,n){e.patternOptions=t,e.field.validation=e.field.validation||{},e.field.validation.messages=e.field.validation.messages||{},e.fields={required:!1,minlength:!1,maxlength:!1,pattern:!1},e.$watch(n.febwormsPropertyFieldValidation,function(t){e.fields=angular.extend(e.fields,t)})}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsParsePattern",function(){return{require:["ngModel"],link:function(e,t,r,n){function o(e){console.log(e);try{new RegExp(e)}catch(t){return void i.$setValidity("pattern",!1)}return i.$setValidity("pattern",!0),e}var i=n[0];i.$parsers.push(o),console.log("123")}}}),angular.module("febworms",["febworms.templates"]).directive("febwormsPropertyField",["febwormsPropertyFieldLinkFn",function(e){return{restrict:"AE",templateUrl:"components/febworms/edit/canvas/field/properties/property-field/property-field.tmpl.html",transclude:!0,scope:!0,link:e}}]).factory("febwormsPropertyFieldLinkFn",function(){return function(e,t,r){r.$observe("febwormsPropertyField",function(t){e.fieldName=t}),r.$observe("febwormsPropertyFieldLabel",function(t){t&&(e.fieldLabel=t)})}}),angular.module("febworms",["febworms.templates"]).directive("febwormsPropertyFieldValue",["febwormsPropertyFieldValueLinkFn",function(e){return{require:["^form"],templateUrl:"components/febworms/edit/canvas/field/properties/property-field/field-value.tmpl.html",transclude:!0,link:e}}]).factory("febwormsPropertyFieldValueLinkFn",["$parse",function(){return function(e,t,r,n){e.draw=!0;var o,i=n[0];e.$watch("field.$_redraw",function(r){if(r){var n=i.fieldValue;n&&(o=n.$viewValue),e.draw=!1,e.field.$_redraw=!1}else e.draw=!0,t=t}),e.$watch(function(){return i.fieldValue},function(e){e&&o&&(e.$setViewValue(o),e.$render(),o=void 0)})}}]).directive("febwormsFieldRedraw",function(){return{require:["ngModel"],link:function(e,t,r){var n=e.$eval(r.ngModel);e.$watch(r.ngModel,function(t){t!=n&&(e.field.$_redraw=!0,n=t)})}}}),angular.module("febworms",["febworms.templates"]).directive("febwormsPropertyFieldCommon",["febwormsPropertyFieldCommonLinkFn",function(e){return{restrict:"AE",templateUrl:"components/febworms/edit/canvas/field/properties/property-field/common.tmpl.html",link:e}}]).factory("febwormsPropertyFieldCommonLinkFn",function(){return function(e,t,r){e.fields={fieldname:!1,displayname:!1,placeholder:!1,tooltip:!1,focus:!1},e.$watch(r.febwormsPropertyFieldCommon,function(t){e.fields=angular.extend(e.fields,t)})}}),angular.module("febworms",["febworms.templates"]).directive("febwormsPropertyFieldOptions",["febwormsPropertyFieldOptionsLinkFn",function(e){return{scope:!0,controller:"febwormsPropertyFieldOptionsController as optionsCtrl",templateUrl:"components/febworms/edit/canvas/field/properties/options/options.tmpl.html",link:e}}]).factory("febwormsPropertyFieldOptionsLinkFn",function(){return function(e,t,r){e.multiple=!1,r.$observe("febwormsPropertyFieldOptions",function(t){"multiple"===t&&(e.multiple=!0)})}}),angular.module("febworms",["febworms.templates"]).controller("febwormsPropertyFieldOptionsController",["$scope",function(e){function t(t,r){t!==r&&(e.multiple?(e.field.value[t]=e.field.value[r],delete e.field.value[r]):r===e.field.value&&(e.field.value=t))}var r=1;e.$watchCollection("field.options",function(r){r&&angular.forEach(r,function(r){r.$_valueWatchFn||(r.$_valueWatchFn=e.$watch(function(){return r.value},t))})}),this.addOption=function(){e.field.options||(e.field.options=[]);var t={value:"Option "+r++};e.field.options.push(t);var n=e.field.options.length;e.multiple||1!==n||(e.field.value=t.value)},this.removeOption=function(t){var r=e.field.options.splice(t,1);if(r&&r.length){var n=r[0];e.multiple?void 0!==e.field.value[n.value]&&delete e.field.value[n.value]:(n.value===e.field.value&&e.field.options.length&&(e.field.value=e.field.options[0].value),n.$_valueWatchFn())}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditCanvasFieldProperties",["febwormsUtils",function(e){return{templateUrl:"components/febworms/edit/canvas/field/properties/properties.tmpl.html",replace:!0,scope:{field:"=febwormsEditCanvasFieldProperties"},link:function(t){t.$watch("fieldPropertiesForm.$invalid",function(e){t.field.$_invalid=e}),t.renderInfo=e.getRenderInfo(t.field)}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditPaletteCategories",function(){return{templateUrl:"components/febworms/edit/palette/categories/categories.tmpl.html",require:"^febwormsEditPalette",scope:{category:"=?"},controller:"febwormsEditPaletteCategoriesController"}}),angular.module("febworms",["febworms.templates"]).controller("febwormsEditPaletteCategoriesController",["$scope","febwormsConfig",function(e,t){e.categories=t.fields.categories,e.setCategory=function(t,r){e.categoryName=t,e.category=r}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditCanvasField",function(){return{replace:!0,templateUrl:"components/febworms/edit/canvas/field/field.tmpl.html"}}),angular.module("febworms",["febworms.templates"]).directive("febwormsSchema",["febwormsSchemaLinkFn",function(e){return{require:["febwormsSchema"],controller:"febwormsSchemaController",link:e}}]).factory("febwormsSchemaLinkFn",["$parse",function(e){return function(t,r,n,o){var i=o[0],a=e(n.febwormsSchema),l=a.assign,s=a(t);i.model(s),t.$watch(function(){return i.model()},function(e){l(t,e)})}}]),angular.module("febworms",["febworms.templates"]).controller("febwormsSchemaController",["$scope","febwormsUtils",function(e,t){var r;this.model=function(e){return void 0!==e&&(r=e,angular.isArray(e.fields)||(e.fields=[])),r},this.addField=function(e,n){var o=t.copyField(e);n=void 0===n?r.fields.length:n,r.fields.splice(n,0,o)},this.removeField=function(e){r.fields.splice(e,1)},this.swapFields=function(e,t){-1>=e||-1>=t||e>=r.fields.length||t>=r.fields.length||(r.fields[e]=r.fields.splice(t,1,r.fields[e])[0])},this.moveField=function(e,t){if(e>=0&&t<=r.fields.length&&e!==t){var n=r.fields.splice(e,1)[0];t>e&&--t,r.fields.splice(t,0,n)}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsFormFields",function(){return{require:["^febwormsForm"],restrict:"AE",templateUrl:"components/febworms/form/form-fields/form-fields.tmpl.html",scope:{},link:function(e,t,r,n){var o=n[0];e.$watch(function(){return o.model},function(t){e.form=t})}}}),angular.module("febworms",["febworms.templates"]).directive("febwormsFieldInput",["febwormsFieldInputLinkFn",function(e){return{require:["^febwormsField","ngModel"],link:e}}]).factory("febwormsFieldInputLinkFn",function(){return function(e,t,r,n){var o=n[0],i=n[1];o.setFieldState(i)}}),angular.module("febworms",["febworms.templates"]).directive("febwormsFieldFocus",["$parse",function(e){return{require:["?^febwormsForm"],link:function(t,r,n,o){var i=o[0],a=r[0],l=e(n.febwormsFieldFocus),s=l.assign;t.$watch(l,function(e){if(e){if(i&&(i.clearFocusOnFields(),s(t,!0),i.editMode))return;a.focus()}else i&&!i.editMode&&a.blur()})}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsField",["febwormsFieldLinkFn",function(e){return{require:["^?febwormsForm","febwormsField"],replace:!0,templateUrl:"components/febworms/form/field/field.tmpl.html",scope:{fieldSchema:"=febwormsField",tabIndex:"=?febwormsTabIndex",editMode:"=?febwormsEditMode",noValidationSummary:"=febwormsNoValidationSummary"},controller:"febwormsFieldController",link:e}}]).factory("febwormsFieldLinkFn",["febwormsUtils",function(e){return function(t,r,n,o){var i=o[0],a=o[1];void 0===t.tabIndex&&(t.tabIndex="auto"),t.renderInfo=e.getRenderInfo(t.fieldSchema),a.init(i,t.fieldSchema,t.editMode)}}]),angular.module("febworms",["febworms.templates"]).controller("febwormsFieldController",["$scope","febwormsUtils",function(e,t){var r,n,o=this;this.init=function(t,i,a){o.initForm(t),o.initField(i),o.initDefaultData(i,a),e.form=r,e.field=n},this.initForm=function(e){return r=e?e.model:{}},this.initField=function(r){return n={$_id:"id"+t.getUnique(),schema:r},e.$watch("field.schema.name",function(e){o.registerState(e)}),n},this.initDefaultData=function(t,n){var o=t.name;return r.data=r.data||{},n?(e.$watch("field.schema.value",function(e){r.data[t.name]=e}),e.$watch("field.schema.name",function(e,t){if(e!==t){var n=r.data[t];delete r.data[t],r.data[e]=n}})):r.data&&void 0===r.data[o]&&void 0!==t.value&&(r.data[o]=t.value),r.data},this.setFieldState=function(e){n.state=e,o.registerState(n.schema.name)},this.registerState=function(e){r.state&&n.state&&(r.state.$removeControl(n.state),n.state.$name=e,r.state.$addControl(n.state)),n.name=e},this.field=function(){return n},this.form=function(){return r}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditPalette",function(){return{require:["^febwormsSchema"],templateUrl:"components/febworms/edit/palette/palette.tmpl.html",controller:"febwormsEditPaletteController",link:function(e,t,r,n){e.schemaCtrl=n[0]}}}),angular.module("febworms",["febworms.templates"]).controller("febwormsEditPaletteController",["$scope","febwormsConfig",function(e,t){e.templates=angular.copy(t.fields.templates);e.templateFilter=function(t){return!e.selectedCategory||e.selectedCategory[t.type]}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditFormActions",["febwormsConfig",function(e){return{require:"^febwormsEdit",templateUrl:"components/febworms/edit/form-actions/form-actions.tmpl.html",link:function(t,r,n,o){t.debugInfoEnabled=e.enableDebugInfo,t.togglePreview=function(){t.schema.$_invalid||o.togglePreview()},t.handleSave=function(){t.schema.$_invalid||t.onSave({schema:t.schema})},t.handleCancel=function(){t.onCancel({schema:t.schema})}}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEditCanvas",function(){return{require:["^febwormsEdit","^febwormsSchema"],templateUrl:"components/febworms/edit/canvas/canvas.tmpl.html",controller:"febwormsEditCanvasController as canvasCtrl",link:function(e,t,r,n){e.editCtrl=n[0],e.schemaCtrl=n[1]}}}),angular.module("febworms",["febworms.templates"]).controller("febwormsEditCanvasController",["$scope","dqUtils","$timeout","febwormsUtils",function(e,t,r){e.dragPlaceholder={visible:!1,index:0},this.dragEnter=function(){e.dragPlaceholder.visible=!0,e.dragPlaceholder.index=e.schema.fields.length},this.dragLeave=function(){e.dragPlaceholder.visible=!1},this.dragBeginCanvasField=function(e,t){return r(function(){t.$_isDragging=!0},1),{source:"canvas",field:t,index:e}},this.dragEndCanvasField=function(e){r(function(){e.$_isDragging=!1},10)},this.drop=function(){var r=t.dragData();if(!r||!r.data)throw Error("Drop without data");{var n=r.data.field,o=r.data.source,i=r.data.index;e.schema.fields}"palette"==o?e.schemaCtrl.addField(n,e.dragPlaceholder.index):"canvas"==o&&e.schemaCtrl.moveField(i,e.dragPlaceholder.index),n.$_isDragging=!1}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsTabsPane",["febwormsTabsPaneLinkFn",function(e){return{require:["febwormsTabsPane","^febwormsTabs"],restrict:"EA",scope:!0,transclude:!0,controller:"febwormsTabsPaneController",templateUrl:"components/febworms/common/tabs/tabs-pane.tmpl.html",link:e}}]).factory("febwormsTabsPaneLinkFn",function(){return function(e,t,r,n){var o=n[0],i=n[1];e.$_paneCtrl=o,r.$observe("febwormsTabsPane",function(e){o.title=e}),i.addPane(o)}}),angular.module("febworms",["febworms.templates"]).controller("febwormsTabsPaneController",["$scope",function(){}]),angular.module("febworms",["febworms.templates"]).directive("febwormsTabs",function(){return{require:["febwormsTabs"],restrict:"EA",transclude:!0,controller:"febwormsTabsController",templateUrl:"components/febworms/common/tabs/tabs.tmpl.html",link:function(e,t,r,n){e.$_tabCtrl=n[0]}}}),angular.module("febworms",["febworms.templates"]).controller("febwormsTabsController",["$scope",function(){var e=this;this.panes=[],this.addPane=function(t){e.panes.push(t),1===e.panes.length&&e.active(t)},this.active=function(t){angular.forEach(e.panes,function(e){e.active=!1}),t.active=!0}}]),angular.module("febworms",["febworms.templates"]).filter("j$on",function(){return function(e,t){return t?JSON.stringify(e||{},null,"  "):angular.toJson(e||{},!0)}}).directive("jsonify",["$window","$filter",function(e,t){return{templateUrl:"components/febworms/common/jsonify/jsonify.tmpl.html",replace:!0,scope:{jsonify:"=",displayHidden:"@jsonifyDisplayHidden"},link:function(r,n,o){r.expression=o.jsonify,r.copy=function(){e.prompt("Copy to clipboard: Ctrl+C, Enter",t("j$on")(r.jsonify,r.displayHidden))}}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsUniqueFieldName",function(){function e(e,t,r){var n,o=t.model(),i=!0;if(o)for(var a=o.fields,l=0;l<a.length;l++)if(n=a[l],n!==r&&r.name===n.name){i=!1;break}e.$setValidity("unique",i)}var t=0;return{priority:100,require:["ngModel","^febwormsSchema"],link:function(r,n,o,i){var a=i[0],l=i[1],s=r.field;if(!s)throw Error("No field property on scope");r.$watch(function(){return a.$modelValue},function(){++t}),r.$watch(function(){return t},function(){e(a,l,s)})}}}),angular.module("febworms",["febworms.templates"]).directive("febwormsValidationSummary",["febwormsValidationSummaryLinkFn",function(e){return{require:["^?febwormsField","^?form"],templateUrl:"components/febworms/validation/summary.tmpl.html",scope:{fieldName:"@?febwormsValidationSummary",validationMessages:"=?febwormsValidationMessages"},link:e}}]).factory("febwormsValidationSummaryLinkFn",["febwormsConfig",function(e){return function(t,r,n,o){var i=o[0],a=o[1];i?(t.field=i.field(),t.form=i.form()):a&&(t.form={state:a},t.$watch("fieldName",function(e){t.field={name:e,state:a[e]}})),t.validationMessages&&angular.forEach(t.validationMessages,function(e,r){e||delete t.validationMessages[r]}),t.messages=angular.extend({},e.validation.messages,t.validationMessages)}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsForm",["febwormsFormCompileFn",function(e){return{restrict:"AE",require:["^?form","febwormsForm","^febwormsSchema"],controller:"febwormsFormController",scope:!0,compile:e}}]).factory("febwormsFormLinkFn",function(){return function(e,t,r,n){var o=n[0],i=n[1],a=n[2],l="true"===r.febwormsNoRender;i.init(r.febwormsFormData,a,o,l)}}).factory("febwormsFormCompileFn",["febwormsFormLinkFn",function(e){return function(t,r){var n=r.febwormsNoRender;if("true"!==n){var o="<div febworms-form-fields></div>";t.append(o)}return e}}]),angular.module("febworms",["febworms.templates"]).controller("febwormsFormController",["$scope","$parse",function(e,t){this.model={};var r=this;this.init=function(n,o,i,a){r.editMode=a;var l=t(n),s=l.assign;return e.$watch(l,function(t){void 0===t&&(t={},s&&s(e,t)),r.model.data=t}),e.$watch(function(){return o.model()},function(e){void 0===e?o.model({}):r.model.schema=e}),r.model.state=i,r.model},this.clearFocusOnFields=function(){angular.forEach(r.model.schema.fields,function(e){e.focus=!1})}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsEdit",function(){return{priority:100,require:"febwormsSchema",restrict:"AE",scope:{schema:"=?febwormsSchema",actionsEnabled:"=?febwormsActionsEnabled",onSave:"&febwormsOnSave",onCancel:"&febwormsOnCancel",preview:"=?febwormsPreview"},replace:!0,controller:"febwormsEditController as editCtrl",templateUrl:"components/febworms/edit/edit.tmpl.html",link:function(e,t,r,n){void 0===e.schema&&(e.schema={}),void 0===e.actionsEnabled&&(e.actionsEnabled=!0),void 0===e.preview&&(e.preview=!1),n.model(e.schema),e.schemaCtrl=n}}}),angular.module("febworms",["febworms.templates"]).controller("febwormsEditController",["$scope","febwormsUtils","$location",function(e,t,r){var n=this;e.preview=r.search().preview,this.setMetaForm=function(e){n.metaForm=e},this.togglePreview=function(){e.preview=!e.preview},e.$watch(function(){var t=e.schemaCtrl.model();if(t&&(t.$_invalid=n.metaForm?n.metaForm.$invalid:!1,!t.$_invalid)){var r=t.fields;if(r)for(var o=r.length;--o>=0&&!t.$_invalid;)t.$_invalid=r[o].$_invalid}})}]),angular.module("dq",[]).factory("dqUtils",["$window","$rootScope",function(e){var t=null;return{getEvent:function(t){return t&&t.originalEvent?t.originalEvent:t||e.event},stopEvent:function(e){return e.cancelBubble=!0,e.bubbles=!1,e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),!1},dragData:function(e){return void 0===e?t:void(t=e)},getParentArea:function(e){var t={};return e.$emit("dqLocateArea",t),t.name},isAreaMatch:function(e){var r=this.getParentArea(e),n=t?t.area:"";return r===n}}}]),angular.module("dq").directive("dqDraggable",["dqUtils","$rootScope",function(e,t){function r(e,r,n,o,i){n.$apply(function(){var a=n.$eval(o),l={area:r,data:a};i(l),t.$broadcast(e,l)})}return{restrict:"AEC",link:function(t,n,o){var i=o.dqDraggable||o.dqDragTargetArea||"",a=!1;t.$watch(o.dqDragDisabled,function(e){a=e,n.attr("draggable",a?"false":"true")}),n.on("selectstart",function(t){return!a&&this.dragDrop?(this.dragDrop(),t=e.getEvent(t),e.stopEvent(t)):void 0}).on("dragstart",function(n){if(n=e.getEvent(n),a)return e.stopEvent(n);var l=n.dataTransfer;l.effectAllowed="all",l.setData("Text","The cake is a lie!"),r("dqDragBegin",i,t,o.dqDragBegin,function(t){e.dragData(t)})}).on("dragend",function(){r("dqDragEnd",i,t,o.dqDragEnd,function(){e.dragData(null)})})}}}]),angular.module("dq").directive("dqDragEnter",["dqDragTrack",function(e){return{link:e}}]).directive("dqDragLeave",["dqDragTrack",function(e){return{link:e}}]).directive("dqDragOver",["dqDragTrack",function(e){return{link:e}}]).directive("dqDrop",["dqDragTrack",function(e){return{link:e}}]).factory("dqDragTrack",["dqUtils","$document",function(e,t){return function(r,n,o){function i(t){var r=e.getEvent(t),n=r.target||t.target;return n!==f&&(f.contains(n)||a(!0)),u.off("dragover",i),m=!1,r.dataTransfer.dropEffect=d,e.stopEvent(t)}function a(e){s=!1;var t=o.dqDragLeave;t&&(e?r.$apply(function(){r.$eval(t)}):r.$eval(t))}if(n.data("dqDragTrack")!==!0){var l=!1,s=!1,f=n[0],d="none",m=!1,u=t.find("body");r.$on("$destroy",function(){u.off("dragover",i)}),r.$on("dqDragBegin",function(){l=e.isAreaMatch(r)}),r.$on("dqDragEnd",function(){l&&a(!1)}),n.on("dragenter",function(){if(l&&s===!1){s=!0;var e=o.dqDragEnter;e&&r.$apply(function(){r.$eval(e)})}}),n.on("dragleave",function(){l&&s===!0&&(m=!0,u.on("dragover",i))}),n.on("dragover",function(t){if(l){var n,i=e.getEvent(t),a=o.dqDragOver;if(a&&r.$apply(function(){n=r.$eval(a)}),d=n===!1?"none":"copy",!m)return i.dataTransfer.dropEffect=d,e.stopEvent(t)}}),n.on("drop",function(t){e.getEvent(t);if(l){var n=o.dqDrop;n&&r.$apply(n)}return e.stopEvent(t)}),n.data("dqDragTrack",!0)}}}]),angular.module("dq").directive("dqDragArea",["dqUtils",function(){function e(e,t,r,n){n&&t&&t.area===r&&e.$eval(n)}return{restrict:"AEC",link:function(t,r,n){var o=n.dqDragArea||n.dqDragAreaName||"";t.$on("dqDragBegin",function(r,i){e(t,i,o,n.dqDragProgressBegin)}),t.$on("dqDragEnd",function(r,i){e(t,i,o,n.dqDragProgressEnd)}),t.$on("dqLocateArea",function(e,t){t.name=o,e.stopPropagation()})}}}]),angular.module("febworms",["febworms.templates"]).factory("febwormsUtils",["$templateCache","$http","$window","febwormsConfig",function(e,t,r,n){var o=+new Date%1e4;return{getScrollOffset:function(){var e={};if(void 0!==r.pageYOffset)e.x=r.pageXOffset,e.y=r.pageYOffset;else{var t=r.document.documentElement;e.x=t.scrollLeft,e.y=t.scrollTop}return e},defaultArea:"default",getRenderInfo:function(e){var t=n.fields.renderInfo[e.type];return t||(t={},n.fields.renderInfo[e.type]=t),t.templateUrl||(t.templateUrl=this.getTemplateUrl(e)),t.propertiesTemplateUrl||(t.propertiesTemplateUrl=this.getTemplateUrl(e,"properties")),t},formatTemplateUrl:function(e,t){return"components/febworms/field-templates/"+(t||this.defaultArea)+"/"+e+".tmpl.html"},getTemplateUrl:function(e,t){t=t||this.defaultArea;var r=e.type,n=this.formatTemplateUrl(r,t);return"properties"!==t&&t!==this.defaultArea&&(n=this.getTemplateUrl(e,this.defaultArea)),n},getUnique:function(){return++o},copyField:function(e){var t=angular.copy(e);return t.name="field"+this.getUnique(),t},findElementsByClass:function(e,t,r,n){if(n=n||[],e.className===t&&n.push(e),e.hasChildNodes())for(var o=0;o<e.children.length;o++){var i=e.children[o];i.className===t&&n.push(i),r&&this.findElementsByClass(i,t,r,n)}return n}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsPlaceholder",function(){return{link:function(e,t,r){e.$watch(r.febwormsPlaceholder,function(e){t.attr("placeholder",e)})}}}),angular.module("febworms",["febworms.templates"]).directive("febwormsInputNumber",function(){return{require:"ngModel",link:function(e,t,r,n){if(n.$parsers.push(function(e){if(void 0==e)return"";var t=e.replace(/[^0-9]/g,""),r=parseInt(t);return t!=e&&(n.$setViewValue(t),n.$render()),r}),n.$parsers.push(function(e){var t=n.$isEmpty(e);return t||/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/.test(e)?(n.$setValidity("number",!0),""===e?null:t?e:parseFloat(e)):void n.$setValidity("number",!1)}),n.$formatters.push(function(e){return n.$isEmpty(e)?void 0:e}),r.min){var o=function(e){var t=parseFloat(r.min);return!n.$isEmpty(e)&&t>e?void n.$setValidity("min",!1):(n.$setValidity("min",!0),e)};n.$parsers.push(o),n.$formatters.push(o)}if(r.max){var i=function(e){var t=parseFloat(r.max);return!n.$isEmpty(e)&&e>t?void n.$setValidity("max",!1):(n.$setValidity("max",!0),e)};n.$parsers.push(i),n.$formatters.push(i)}n.$formatters.push(function(e){return n.$isEmpty(e)||angular.isNumber(e)?(n.$setValidity("number",!0),e):void n.$setValidity("number",!1)})}}}),angular.module("febworms",["febworms.templates"]).directive("febwormsDropdownInput",["$compile","$document","$timeout","$parse","febwormsUtils",function(e,t,r,n,o){function i(e,t){var n='<div class="febworms-dropdown-input input-append"><input type="text"/><div class="btn-group"><a href="" class="btn dropdown-toggle" ng-click="dropdownToggle()"><span class="caret"></span></a></div></div>',o=angular.element(n),i=o.find("input"),a=t.prop("attributes");angular.forEach(a,function(e){"febworms-dropdown-input"!==e.name&&"class"!==e.name&&i.attr(e.name,e.value)});var l,s=o.find("a");return e.dropdownToggle=function(){s[0].focus(),e.dropdownVisible=!e.dropdownVisible},s.on("blur",function(){l=r(function(){e.dropdownVisible=!1},100)}),e.$on("$destroy",function(){l&&r.cancel(l),l=void 0}),o}function a(e,t,r,i,a){var l=n(r.ngModel),s=l.assign,f='<div class="febworms-dropdown" ng-class="{ \'open\': dropdownVisible }"><ul ng-if="items && items.length" class="dropdown-menu"><li ng-repeat="item in items" ng-class="{ active: item.value === getModelValue() }"><a href="" ng-click="setModelValue(item.value)">{{ item.text || item.value }}</a></li></ul></div>',d=angular.element(f);e.setModelValue=function(t){e.dropdownVisible=!1;for(var r=t||"",n=i.$formatters.length;n--;){var o=i.$formatters[n],r=o(r);if(void 0===r)break}n=i.$parsers.length;for(var a=r;n--;){var o=i.$parsers[n];if(a=o(a),void 0===a)break}void 0===a?(i.$setViewValue(r),i.$render()):s(e,t)},e.getModelValue=function(){return l(e)};var m=a[0];return e.$watch("dropdownVisible",function(e){if(e){var t=m.getBoundingClientRect(),r=o.getScrollOffset();d.css({left:r.x+t.left+"px",top:r.y+t.top+m.clientHeight+"px",width:m.clientWidth+"px"})}}),e.$watchCollection(r.febwormsDropdownInput,function(t){e.items=t}),e.$on("$destroy",function(){d.remove()}),d}return{priority:1e3,restrict:"A",terminal:!0,scope:!0,compile:function(){return function(r,n,o){var l=i(r,n,o);n.append(l),e(l)(r);var s=l.find("input"),f=s.controller("ngModel"),d=a(r,n,o,f,l),m=e(d),u=t.find("body");u.append(d),m(r)}}}}]),angular.module("febworms",["febworms.templates"]).directive("febwormsBindExpression",["$interpolate",function(e){function t(e){for(var t=[],r=e.parts,n=r.length;n--;){var o=r[n];o.exp&&!o.exp.match(/^\s*$/)&&t.push(o.exp)}return"["+t.join()+"]"}return function(r,n,o){function i(){s&&s(),s=void 0}function a(){n.text(l(r))}var l,s,f;r.$on("$destroy",function(){i()}),r.$watch(o.febwormsBindExpression,function(o){if(void 0!==o){l=e(o),n.addClass("ng-binding").data("$binding",l);var d=t(l);f!==d?(f=d,i(),s=r.$watchCollection(d,function(){a()})):a()}})}}]);
//# sourceMappingURL=data:application/json;base64,